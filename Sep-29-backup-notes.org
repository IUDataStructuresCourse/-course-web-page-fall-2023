#+TITLE: Project 2 Notes
#+DATE: <2023-09-29 Fri>
#+OPTIONS: num:nil toc:nil

[[./index][ðŸ”™HOME]]

*ðŸš§Under constructionðŸš§*

* Segment Intersection (AVL Trees)

** Project Overview and General Remarks

+ The line sweep algorithm is provide to you
  * No need to worry about the segment intersection
    algorithm per se, just the data structures used
+ Implement ~BinarySearchTree~ and ~AVLTree~
  * ~BinarySearchTree~ /implements/ the ~OrderedSet~ interface:
    * ~height()~: *need to maintain the height during operations*
    * ~search()~, ~contains()~, ~insert()~, ~remove()~: [[https://iudatastructurescourse.github.io/course-web-page-fall-2023/lectures/Sep-13][lecture notes]]
    * ~keys()~: in-order traversal of the BST
      * returns a sorted list
  * ~AVLTree~ /extends/ ~BinarySearchTree~ by overriding:
    * ~insert()~: balance the tree by (single, double) rotations
    * ~remove()~: balance the tree by (single, double) rotations
      * where?
      * how?

** BST Implementation Details

*** One Specification Caveat of ~insert()~...

We should note that the [[https://en.wikipedia.org/wiki/Design_by_contract][contract]] of ~insert()~ is different
between the student support code and the textbook, so a direct
copy-and-paste apparently won't work!

+ Your code is expected to return (quote the support code):
  "the location where the insert occurred", that is, a reference
  to the newly-inserted node.
+ However, the code in the book returns the root of the tree.

You need to adapt the code... (fortunately not too much)

Also, make sure to update:
+ *height* (~updateHeight()~) for all ancestors
+ *size of the tree* (~numNodes~)

Same for ~remove()~.

*** Possible helper functions

**** Setting the children of a node

Question: how to set the left child of =n= to be =l=?

+ Previously we used ~n.left = l~ in the lecture. Does it still apply?
  * No. It doesn't set the parent of =l= to be =n=.
    * We didn't have ~parent~ before!
  * Side question: why do we need ~parent~ this time?
    * Hint: [[./lab4][Lab 4]]

** AVL Specific Implementation Details

*** Where to re-balance?

Quote textbook p. 125:

#+BEGIN_QUOTE
We will show how to re-balance the tree at the first
(i.e., deepest) such node, and we will prove that this
re-balancing guarantees that the entire tree satisfies
the AVL property.
#+END_QUOTE

Slightly confusing. In fact, we need to re-balance the tree
from the current node of the operation, ~insert()~ or ~remove()~,
*all the way up* to the root node!

If you define ~insert()~ and ~remove()~ recursively,
you need to call ~balance()~ on the current root of the
sub-tree before you return.

Please do update the height during re-balancing.

*** How to re-balance?
